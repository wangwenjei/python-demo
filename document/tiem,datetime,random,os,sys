tiem,datetime,random,os,sys
=========  time ========= 
时间库

时间戳,用于时间间隔的计算
	time.time()   ===> 1625635215.681579 

按照某种格式显示时间,用于展示时间
	time.strftime('%Y-%m-%d %H:%M:%S')   ===>  2021-07-07 13:20:15

结构化的时间,用于单独获取时间的某一部分
	time.localtime()  ===>
	time.struct_time(tm_year=2021, tm_mon=7, tm_mday=7, 
	tm_hour=13, tm_min=20, tm_sec=15, tm_wday=2, tm_yday=188, tm_isdst=0)

睡眠时间
	time.sleep(3)


针对字符串格式时间的运算
	注意: 格式化的字符串时间与时间戳无法直接互转

格式化字符串时间 --strptime-->  结构化的时间   
              <--strftime--

结构化的时间 --mktime--> 时间戳
           <--localtime 


将日志中 1997-11-11 11:11:11 时间字符串计算七天后时间

# format time ---> struct time  ---> timestamp
struct_time=time.strptime('1997-11-11 11:11:11','%Y-%m-%d %H:%M:%S')
timestamp = time.mktime(struct_time)+7*86400

#format time <--- struct time  <--- timestamp
res = time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(timestamp))

print(res)  ===> 1997-11-18 11:11:11




=========  datetiem ========= 
日期处理库
(datetime获取的时间可以相互运算,time只有时间戳才能运算)

按照某种时间格式展示时间(可相互计算)
	datetime.datetime.now()   ===> 2021-07-07 13:40:46.468204

计算一段时间段 前/后 是什么时间
	datetime.datetime.now() + datetime.timedelta(days=3)   ===> 2021-07-10 13:40:46.468220
 
将时间戳转化为格式化为格式化字符的展示
	datetime.datetime.fromtimestamp(879217871.0)  ===> 1997-11-11 11:11:11



=========  random  随机数库 ========= 

	import random

	def make_code(size:int=4)->str:
	    res = ''
	    for i in range(size):
	        s1 = chr(random.randint(65,90))
	        s2 = str(random.randint(0,9))
	        res += random.choice([s1,s2])
	    return res

	print(make_code(6))   ===> 打印随机字符串 624NH0



========= OS ========= 
文件和路径操作功能,还可调用操作系统

执行系统命令
	os.system()
	os.system('touch ./test1/hello.txt')

获取某一文件夹下所有子文件以及子文件夹的名字
	os.listdir(r'os.listdir(r'/Users')')  

统计某个目录文件大小,单位为字节
	os.path.getsize(r'/Users/shaun/Healife/python/xuexi')	

删除一个文件
	os.remove()

给一个文件重命名
	os.rename('old_name','new_name')

环境变量(规定 key 与 value 必须都为字符串 )
	os.environ['aaa'] = '111'

获取文件路径
	os.path.dirname(r'/python/xuexi/2.py')   ===> /python/xuexi
获取最后一级文件名
	os.path.basename(r'/python/xuexi/2.py')  ===> 2.py

判断文件是否存在
	os.path.isfile(r'test.py')
判断文件夹是否存在
	os.path.isdir(r'/dir')

把字符拼接成路径,以 / 为起始,
	os.path.join('a','/','b','c.txt')  ===> /b/c.txt

获取当前文件上一级目录
	os.path.dirname(__file__)

Python3.5 后 出现 pathlib 模块 处理路径

from pathlib import Path
Path(__file__) 当前文件路径
.parent上一级
print(Path(__file__).parent)


========= sys =========
系统和环境相关功能

运行py脚本时获取 位置参数方法 
	name = sys.argv[1]   获取第一个位置参数赋值给name

  


















