迭代器,生成器与各种类型生成式

迭代器: 迭代器指的是迭代取值的工具,迭代是一个重复的过程,
	   每次重复都是基于上一次的结果而继续,单纯的重复并不是迭代
	   迭代器是用来迭代取值的工具,而涉及到把多个值循环取出来的类型有:列表,字符串,元组,字典,集合,打开的文件

	   为了解决基于索引迭代器取值的局限性
	   可迭代对象:但凡内置有__iter__方法的都称之为可迭代对象

	   
	   d = {'a':1,'b':2,'c':3}
	   d_iter = d.__iter__()  # 转换为可迭代
	   
	   print(d_iter.__next__())  ===> a
	   print(d_iter.__next__())  ===> b
	   print(d_iter.__next__())  ===> c
	   print(d_iter.__next__())  ===> 抛出异常StopIteration


生成器(自定义的迭代器): 关键点在与 yield 使用
	def func():
		yield  

	会触发函数体代码的运行,然后遇到yield停下来,
	将yield后的值当做本次调用的结果返回

	def ma_range(start,stop,step=1):
	    while start < stop:
	        yield start
	        start+=step

	g = ma_range(1,5,2)

	for i in ma_range(1,5,2):
	    print(i)

表达式形式
def dog(name):
    print('道哥 %s 准备吃东西了....' %name)

    while True:
        x = yield  # 相当于 x = 热包子
        print('道哥 %s 吃了 %s' %(name,x))

g = dog('alex')
g.send(None)     =====> 将生成器挂起
g.send('热包子')  =====> 将热包子传给 yield
g.close()   =====> 关闭后就无法再传值
g.send('大棒骨')  =====> 抛出异常 StopIteration



三元表达式:	
	语法格式:
		条件成立时返回的值 if 条件 else 条件不成立时返回的值

	def func(x,y):
	    res = x if x > y else y
	    return res
	res = func(1,2)
	print(res)   ===> 2

列表生成式:
	语法格式:
		[条件为真输入的值 for i in l if True]
		for 循环每次为真时把值添加到新列表,不接if判断则代表永远为真


	l = ['zbw_dsb','lsy_dsb','wwj']
	new_l = [ name for name in l if name.endswith('dsb')]
	print(new_l)   ===> ['zbw_dsb', 'lsy_dsb']



字典生成式:

	l = [('name','wwj'),('age',18),('gender','man')]
	d = {k:v for k,v in l if not k == 'gender'}

	print(d)   ===>  {'name': 'wwj', 'age': 18}



集合生成式:
	d = {'name': 'wwj', 'age': 18}
	l = [i for i in d if True]
	print(l)   ===> ['name', 'age']


生成器表达式
	g = (i for i in range(0,5) if i > 2)
	print(next(g))   ===> 3
	print(next(g))   ===> 4
	print(next(g))   ===> StopIteration


统计一个文件内有多少字符
	with open(r'./write',mode='rt',encoding='utf-8') as f:
	    # 方法一:
	    # res = 0
	    # for line in f:
	    #     res += len(line)

	    # 方法二: 当文件行数过大时,会导致集合内元素过多,在sum求和是影响效率
	    # res = sum([len(line) for line in f])

	    # 方法三: 效率最高
	    res = sum((len(line) for line in f))

	    print(res)




























